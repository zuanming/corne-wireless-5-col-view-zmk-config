#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define AS(keycode) &as LS(keycode) keycode

&lt {
    flavor = "hold-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    hold-while-undecided;
    hold-trigger-on-release;
};

&mt {
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    hold-while-undecided;
    flavor = "hold-preferred";
};

/ {
    zephyr,display = &ssd1306;
};

&i2c1 {
    ssd1306: ssd1306@3c {
        compatible = "solomon,ssd1306fb";
        reg = <0x3c>;
        label = "SSD1306";
        width = <128>;
        height = <32>;
        segment-offset = <0>;
        page-offset = <0>;
        reset-gpios = <&gpio0 15 0>;
    };
};

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };
    combos {
        compatible = "zmk,combos";

        Caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <20 21 28 29>;
        };

        numsym_l {
            bindings = <&mo 1>;
            key-positions = <11 12>;
        };

        numsym_r {
            bindings = <&mo 1>;
            key-positions = <18 17>;
        };

        left_parenthesis {
            bindings = <&kp LS(N9)>;
            key-positions = <23 22>;
        };

        right_parenthesis {
            bindings = <&kp RS(N0)>;
            key-positions = <26 27>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <12 13>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <17 16>;
        };

        left_bracket {
            bindings = <&kp LS(LEFT_BRACKET)>;
            key-positions = <3 2>;
        };

        right_bracket {
            bindings = <&kp RS(RIGHT_BRACKET)>;
            key-positions = <6 7>;
        };

        shift_l {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <10 11>;
        };

        shift_r {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <18 19>;
        };
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <250>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        mt_tap: mt_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        mt_hold_while_undecided: mt_hold_while_undecided {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_HOLD_WHILE_UNDECIDED";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-while-undecided;
            hold-trigger-on-release;
        };

        lt_bal: lt_bal {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_BAL";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };

        tap_dance_sqt_semi: td_sqt_semi {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SQT_SEMI";
            #binding-cells = <0>;
            bindings = <&as LS(SQT) SQT>, <&as LS(SEMICOLON) SEMICOLON>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";
            bindings = <
&kp Q  &kp W  &kp E  &kp R                &kp T               &kp Y                  &kp U          &kp I                &kp O      &kp P       &kp A                &kp S
&kp D  &kp F  &kp G  &kp H                &kp J               &kp K                  &kp L          &tap_dance_sqt_semi  &kp Z      &kp X       &kp C                &kp V
&kp B  &kp N  &kp M  &as RS(COMMA) COMMA  &as RS(DOT) PERIOD  &as RS(SLASH) SLASH    &mt LCTRL ESC  &kp LEFT_SHIFT       &kp SPACE  &kp RETURN  &lt_bal 2 BACKSPACE  &lt_bal 4 DEL
            >;
        };

        NumSym {
            display-name = "NumSym";
            bindings = <
&kp LS(N1)  &kp LS(N2)     &kp LS(N3)                         &kp LS(N4)                           &kp LS(N9)    &kp LS(N0)    &kp N7        &kp N8           &kp N9         &none                &kp LS(N5)  &kp LS(NUMBER_6)
&kp LS(N7)  &kp BACKSLASH  &as LS(LEFT_BRACKET) LEFT_BRACKET  &as RS(RIGHT_BRACKET) RIGHT_BRACKET  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &as RS(SQT) SQT  &kp LS(EQUAL)  &as LS(MINUS) MINUS  &kp LS(N8)  &kp LS(SLASH)
&none       &none          &kp NUMBER_1                       &kp NUMBER_2                         &kp NUMBER_3  &none         &trans        &trans           &trans         &kp EQUAL            &kp N0      &none
            >;
        };

        Navigation {
            display-name = "Navigation";
            bindings = <
&none  &none  &none  &none     &none           &none             &kp PAGE_UP  &kp UP_ARROW  &kp PAGE_DOWN  &none  &none  &none
&none  &none  &none  &kp HOME  &kp LEFT_ARROW  &kp DOWN_ARROW    &kp RIGHT    &kp END       &none          &none  &none  &none
&none  &none  &none  &none     &none           &none             &none        &mo 3         &kp TAB        &none  &none  &none
            >;

            label = "Nav";
        };

        Mouse {
            bindings = <
&none           &none            &msc SCRL_UP  &none  &none           &none             &none            &mmv MOVE_UP  &none  &none      &none      &msc SCRL_LEFT
&msc SCRL_DOWN  &msc SCRL_RIGHT  &none         &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN    &mmv MOVE_RIGHT  &none         &none  &mkp RCLK  &mkp MCLK  &mkp LCLK
&none           &none            &none         &none  &none           &none             &none            &none         &none  &none      &none      &none
            >;

            label = "Mouse";
        };

        Function {
            bindings = <
&kp F1           &kp F2  &kp F3              &kp F4                &kp CAPS    &kp C_BRIGHTNESS_INC    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &bt BT_NXT  &kp F5   &kp F6
&kp F7           &kp F8  &kp LC(LA(DELETE))  &kp C_BRIGHTNESS_DEC  &kp C_PREV  &kp C_PLAY_PAUSE        &kp C_NEXT  &bt BT_PRV    &kp F9        &kp F10     &kp F11  &kp F12
&kp PRINTSCREEN  &none   &none               &none                 &none       &bt BT_CLR              &none       &none         &none         &none       &none    &none
            >;

            label = "Func";
        };

        layer_5 {
            display-name = "Base";
            bindings = <
&as LS(Q) Q  &as LS(W) W  &as LS(E) E  &as LS(R) R          &as LS(T) T            &as RS(Y) Y            &as RS(U) U    &as RS(I) I                  &as RS(O) O  &as RS(P) P  &as LS(A) A          &as LS(S) S
&as LS(D) D  &as LS(F) F  &as LS(G) G  &as RS(H) H          &as RS(J) J            &as RS(K) K            &as RS(L) L    &as RS(SEMICOLON) SEMICOLON  &as LS(Z) Z  &as LS(X) X  &as C C              &as LS(V) V
&as LS(B) B  &as RS(N) N  &as RS(M) M  &as RS(COMMA) COMMA  &as RS(PERIOD) PERIOD  &as RS(SLASH) SLASH    &mt LCTRL ESC  &kp LEFT_SHIFT               &kp SPACE    &kp RETURN   &lt_bal 2 BACKSPACE  &lt_bal 4 DEL
            >;
        };
    };
};
